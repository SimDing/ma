@startuml


object Click {
name="click"
description=\n"clicks on an html element"
adjective="clickable"
silentExceptions=[ClickIntercepted]
}
object Clear{
name="clear"
description=\n"resets the contents of an HTML element"
adjective="clearable"
}
object SendKeys{
name="send_keys"
description=\n"sends keystrokes to an html element"
adjective="writable"
}

ActionType .. Click : <<instance>>
ActionType .. Clear : <<instance>>
ActionType .. SendKeys : <<instance>>

ActionExecutor <--* ActionType
ActionFactory <--* ActionType
ArgumentDescriptor "*" <--* ActionType



class ActionType<T extends Action>{
String name
String description
String adjective
Class[] silentExceptions
}

note right of ActionType
Die Attribute von ActionType werden benutzt,
um die Eingabe für das LLM zu erzeugen.
end note

interface ActionExecutor<T extends Action> {
void execute(T action)
}
interface ActionFactory<T extends Action> {
T[] extractActions(SeleniumDriver driver)
}

class ArgumentDescriptor{
String name
String description
String randomValue()
}

note left of ArgumentDescriptor::"randomValue()"
Für den
Monkey-Tester
end note

object Keys{
name="keys"
description="the keys to be sent to the html element"
}

Keys <--* SendKeys
ArgumentDescriptor .. Keys : <<instance>>

class Action {
String elementId
void execute()
}

ActionType <--o Action
@enduml